#!/usr/bin/env bash
# A decently hacky script to fetch upcoming birthdays from Google Calendar
# using gcalcli.
#
# Usage:
#   birthdays [--fold COLUMNS] [--conky-color] [--line-start CONTENT]

# The calendar to use for birthdays
BIRTHDAYS_CALENDAR="Contacts"

# How far into the future we should look for "upcoming birthdays" (in seconds)
UPCOMING_DELTA=$((8 * 24 * 60 * 60))

# The format of gcalcli's dates in the returned agenda
DATE_FORMAT='^[A-Z][a-z][a-z] [A-Z][a-z][a-z] [0-9][0-9]*'


error() {
    echo "ERROR:" "$@"
    exit 1
}

fold=
conky_color=
line_start=
while [ "$#" -gt 0 ]; do
    case "$1" in
        --fold)
            if [ ! "$2" ]; then
                error "--fold requires an argument"
            fi
            fold="$2"
            shift 2
            ;;
        --conky-color)
            conky_color=yep
            shift
            ;;
        --line-start)
            if [ ! "$2" ]; then
                error "--line-start requires an argument"
            fi
            line_start="$2"
            shift 2
            ;;
        *)
            error "Invalid argument: $1"
    esac
done

trim() {
    # http://stackoverflow.com/a/3352015
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

call-gcalcli() {
    gcalcli --nocolor --calendar "$BIRTHDAYS_CALENDAR" agenda "$@" \
        | sed -e 's/^ *//' -e 's/ *$//'
}

_today="$(trim "$(call-gcalcli "$(date '+%Y-%m-%d')" "$(date --date='@'$(expr "$(date '+%s')" + 86400) '+%Y-%m-%d')")")"

_upcoming="$(trim "$(call-gcalcli "$(date --date='@'$(expr "$(date '+%s')" + 86400) '+%Y-%m-%d')" "$(date --date='@'$(expr "$(date '+%s')" + $UPCOMING_DELTA) '+%Y-%m-%d')")")"

oldIFS="$IFS"
IFS='
'

today=""
for item in $_today; do
    if [ "$item" ] && [ "$item" != "No Events Found..." ]; then
        if [ "$today" = "" ]; then
            today="Today's birthdays:"
        else
            today="$today"','
        fi
        today="$today $(echo "$item" | sed "s/$DATE_FORMAT//" | sed 's/^\s*//' | sed "s/'s birthday$//")"
    fi
done

upcoming=""
for item in $_upcoming; do
    if [ "$item" ] && [ "$item" != "No Events Found..." ]; then
        if [ "$upcoming" = "" ]; then
            if [ "$today" ]; then
                upcoming="${upcoming}Upcoming:"
            else
                upcoming="${upcoming}Upcoming birthdays:"
            fi
        else
            upcoming="$upcoming"','
        fi
        olddat="$dat"
        dat="$(echo "$item" | sed 's/^\('"$DATE_FORMAT"'\).*$/\1/')"
        if [ "$dat" = "$item" ] && [ "$olddat" ]; then
            # There's no date, so assume previous date
            dat="$olddat"
        fi
        upcoming="$upcoming $(echo "$item" | sed "s/$DATE_FORMAT//" | sed 's/^\s*//' | sed "s/'s birthday$//") ($(date --date="$dat" '+%a %m/%d'))"
    fi
done

IFS="$oldIFS"

echobdays() {
    if [ "$1" ]; then
        content="$1"
        if [ "$fold" ]; then
            content="$(echo "$content" | fold -s -w "$fold")"
        fi
        if [ "$conky_color" ]; then
            content='${color grey}'"$(echo "$content" | sed 's/:/:${color}/g' | sed 's/,/${color grey},${color}/g')"
        fi
        while read -r line; do
            echo "$line_start$line"
        done <<< "$content"
    fi
}

echobdays "$today"
echobdays "$upcoming"

